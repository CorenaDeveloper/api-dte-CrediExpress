name: Go Release Branches

#==========================================================================================================#
#=                         INSTRUCCIONES PARA LA CREACIÓN DE RAMAS DE ENTREGA                             =#
#==========================================================================================================#
#                                                                                                          #
# 1. Este flujo de trabajo se activa cuando se realiza un push a la rama main.                             #
# 2. El flujo de trabajo compila la aplicación para arquitecturas AMD64 y ARM64.                           #
# 3. Se crean dos ramas de despliegue: release-amd64 y release-arm64.                                      #
# 4. Cada rama contiene solo los archivos necesarios para desplegar la aplicación en la arquitectura       #
#    correspondiente.                                                                                      #
# 5. Se genera un binario precompilado y un Dockerfile para cada rama.                                     #
# 6. Se ejecutan las pruebas inicialmente                                                                  #
# 7. En caso de que las pruebas fallen, se generara una Issue para ver que sucedio                         #
#                                                                                                          #
#==========================================================================================================#

on:
  push:
    branches:
      - main

# Añadir permisos explícitos para el workflow
permissions:
  contents: write
  packages: read
  issues: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'

      - name: Install mockgen
        run: |
          go install github.com/golang/mock/mockgen@latest
          echo "Mockgen installed successfully"
          mockgen --version || echo "Warning: mockgen command not found"

      - name: Generate Mocks
        run: |
          # Verificar si existe el archivo de generación de mocks
          if [ -f "./tests/mocks/mocks_generation.go" ]; then
            echo "Generating mocks..."
            cd tests/mocks
            go generate ./mocks_generation.go
            echo "Mocks generated successfully"
          else
            echo "Warning: mocks_generation.go not found, skipping mock generation"
          fi

      - name: Run tests
        id: run_tests
        run: |
          cd tests 2>/dev/null || (echo "Tests directory not found"; exit 0)
          
          TEST_OUTPUT=$(go test ./... 2>&1)
          TEST_EXIT_CODE=$?
          
          # Guardar la salida de test en una variable de entorno para pasos posteriores
          echo "TEST_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$TEST_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "TEST_EXIT_CODE=$TEST_EXIT_CODE" >> $GITHUB_ENV
          
          # Si fallan los tests, terminar con error
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "::error::Tests failed with exit code $TEST_EXIT_CODE"
            exit 1
          fi
          
          echo "Tests completed successfully"

      - name: Create Issue on Test Failure
        if: failure() && steps.run_tests.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testOutput = process.env.TEST_OUTPUT || "No test output available";
            const issueTitle = `🔴 Test failures detected in build from ${context.sha.substring(0, 7)}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: `### Test Failures Detected
            
            The CI pipeline detected test failures when attempting to create release branches.
            
            #### Commit Information
            - Commit: ${context.sha}
            - Branch: ${context.ref}
            - Workflow: ${context.workflow}
            
            #### Test Output
            \`\`\`
            ${testOutput}
            \`\`\`
            
            Please fix these test failures before proceeding with the release.`
            });
            console.log("Created issue for test failures");
  

  build-and-deploy:
    needs: run-tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [amd64, arm64]
        include:
          - architecture: amd64
            docker_base: alpine:latest
            architecture_name: AMD64
          - architecture: arm64
            docker_base: arm64v8/alpine:latest
            architecture_name: ARM64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Create or Update release-${{ matrix.architecture }} branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCHITECTURE: ${{ matrix.architecture }}
          DOCKER_BASE: ${{ matrix.docker_base }}
          ARCHITECTURE_NAME: ${{ matrix.architecture_name }}
        run: |
          # Asegurar que el repositorio tiene el token correcto
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          
          # Verificar si existe la rama release-{arquitectura}
          if git ls-remote --heads origin release-${ARCHITECTURE} | grep release-${ARCHITECTURE}; then
            git checkout release-${ARCHITECTURE}
          else
            git checkout -b release-${ARCHITECTURE}
          fi

          # Traer todo de la rama main
          git checkout main -- .
          
          # Eliminar solo los archivos y directorios específicos que no son necesarios
          rm -rf ./.github 2>/dev/null || true
          rm -rf ./scripts 2>/dev/null || true
          rm -rf ./tests 2>/dev/null || true
          rm -f ./.gitignore 2>/dev/null || true
          rm -f ./.gitattributes 2>/dev/null || true
          rm -f ./README.md 2>/dev/null || true
          
          # Compilar la aplicación para la arquitectura específica
          echo "Compilando la aplicación para ${ARCHITECTURE_NAME}..."
          go mod tidy
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=${ARCHITECTURE} go build -o dte-service ./cmd
          chmod +x dte-service
          
          # Verificar que el binario existe
          if [ -f "./dte-service" ]; then
            echo "Binario 'dte-service' compilado correctamente"
            ls -la ./dte-service
          else
            echo "Error: No se pudo compilar el binario 'dte-service'"
            exit 1
          fi
          
          # Crear un Dockerfile para despliegue
          cat > Dockerfile <<EOF
          FROM ${DOCKER_BASE}
          WORKDIR /app
          COPY dte-service .
          COPY config ./config
          EXPOSE 7319
          CMD ["./dte-service"]
          EOF

          cat > README.md <<EOF
          # Release Branch (${ARCHITECTURE_NAME})

          Esta rama contiene solo los archivos necesarios para desplegar la aplicación en arquitectura ${ARCHITECTURE_NAME}.
          Generada automáticamente a partir de la rama main.

          ## Estructura
          Esta versión ha sido optimizada para despliegue, eliminando archivos innecesarios como documentación,
          scripts de desarrollo y configuraciones de Swagger.
          
          El binario ya está precompilado y listo para ejecutarse en entornos ${ARCHITECTURE_NAME}.
          EOF

          git add .
          MAIN_HASH=$(git rev-parse --short main)
          git commit -m "Release ${ARCHITECTURE_NAME} build from ${MAIN_HASH}"
          git push -f origin release-${ARCHITECTURE}