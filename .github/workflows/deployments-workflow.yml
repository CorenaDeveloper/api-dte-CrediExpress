name: Go Release Branches

#==========================================================================================================#
#=                         INSTRUCCIONES PARA LA CREACIÓN DE RAMAS DE ENTREGA                          =#
#==========================================================================================================#
#                                                                                                          #
# 1. Este flujo de trabajo se activa cuando se realiza un push a la rama main.                             #
# 2. El flujo de trabajo compila la aplicación para arquitecturas AMD64 y ARM64.                           #
# 3. Se crean dos ramas de despliegue: release-amd64 y release-arm64.                                #
# 4. Cada rama contiene solo los archivos necesarios para desplegar la aplicación en la arquitectura       #
#    correspondiente.                                                                                      #
# 5. Se genera un binario precompilado y un Dockerfile para cada rama.                                     #
# 6. Se elimina la documentación, scripts de desarrollo y configuraciones de Swagger.                      #
# 7. Se modifica el archivo main.go para eliminar la importación de Swagger.                               #
# 8. Se modifica el archivo server.go para eliminar la inicialización de Swagger.                          #
#                                                                                                          #
#==========================================================================================================#

on:
  push:
    branches:
      - main

# Añadir permisos explícitos para el workflow
permissions:
  contents: write
  packages: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        architecture: [amd64, arm64]
        include:
          - architecture: amd64
            docker_base: alpine:latest
            architecture_name: AMD64
          - architecture: arm64
            docker_base: arm64v8/alpine:latest
            architecture_name: ARM64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Create or Update release-${{ matrix.architecture }} branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCHITECTURE: ${{ matrix.architecture }}
          DOCKER_BASE: ${{ matrix.docker_base }}
          ARCHITECTURE_NAME: ${{ matrix.architecture_name }}
        run: |
          # Asegurar que el repositorio tiene el token correcto
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          
          # Verificar si existe la rama release-{arquitectura}
          if git ls-remote --heads origin release-${ARCHITECTURE} | grep release-${ARCHITECTURE}; then
            git checkout release-${ARCHITECTURE}
          else
            git checkout -b release-${ARCHITECTURE}
          fi

          # Traer todo de la rama main
          git checkout main -- .
          
          # Eliminar solo los archivos y directorios específicos que no son necesarios
          rm -rf ./.github 2>/dev/null || true
          rm -rf ./api 2>/dev/null || true
          rm -rf ./docs 2>/dev/null || true
          rm -rf ./scripts 2>/dev/null || true
          rm -rf ./tests 2>/dev/null || true
          rm -f ./.gitignore 2>/dev/null || true
          rm -f ./.gitattributes 2>/dev/null || true
          rm -f ./README.md 2>/dev/null || true
          rm -f ./internal/infrastructure/api/routes/swagger_routes.go 2>/dev/null || true
          
          # Modificar main.go para eliminar la línea de importación de Swagger
          if [ -f ./cmd/main.go ]; then
            sed -i '/_ "github.com\/MarlonG1\/api-facturacion-sv\/docs\/swagger/d' ./cmd/main.go
          fi

          if [ -f ./internal/infrastructure/api/server/server.go ]; then
            sed -i '/routes.RegisterSwaggerRoutes(s.router)/d' ./internal/infrastructure/api/server/server.go
          fi
          
          # Compilar la aplicación para la arquitectura específica
          echo "Compilando la aplicación para ${ARCHITECTURE_NAME}..."
          go mod tidy
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=${ARCHITECTURE} go build -o dte-service ./cmd
          chmod +x dte-service
          
          # Verificar que el binario existe
          if [ -f "./dte-service" ]; then
            echo "Binario 'dte-service' compilado correctamente"
            ls -la ./dte-service
          else
            echo "Error: No se pudo compilar el binario 'dte-service'"
            exit 1
          fi
          
          # Crear un Dockerfile para despliegue
          cat > Dockerfile <<EOF
          FROM ${DOCKER_BASE}
          WORKDIR /app
          COPY dte-service .
          COPY config ./config
          EXPOSE 7319
          CMD ["./dte-service"]
          EOF

          cat > README.md <<EOF
          # Release Branch (${ARCHITECTURE_NAME})

          Esta rama contiene solo los archivos necesarios para desplegar la aplicación en arquitectura ${ARCHITECTURE_NAME}.
          Generada automáticamente a partir de la rama main.

          ## Estructura
          Esta versión ha sido optimizada para despliegue, eliminando archivos innecesarios como documentación,
          scripts de desarrollo y configuraciones de Swagger.
          
          El binario ya está precompilado y listo para ejecutarse en entornos ${ARCHITECTURE_NAME}.
          EOF

          git add .
          MAIN_HASH=$(git rev-parse --short main)
          git commit -m "Release ${ARCHITECTURE_NAME} build from ${MAIN_HASH}"
          git push -f origin release-${ARCHITECTURE}